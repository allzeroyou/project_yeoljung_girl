#손글씨 각별 인식
import numpy as np
import cv2
import matplotlib.pyplot as plt
import os, sys


img = cv2.imread("./img/03.jpg")
plt.figure(figsize=(15,12))
plt.imshow(img)

#plt.show()

#이미지 흑백처리
img_gray =cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
#이미지 블러

img_blur = cv2.GaussianBlur(img_gray, (5, 5), 0)

#이미지 내의 경계 찾기
ret, img_th = cv2.threshold(img_blur, 127, 255, cv2.THRESH_BINARY_INV)
contours, hirearchy = cv2.findContours(img_th.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

#경계를 직사각형으로 찾기
rects = [cv2.boundingRect(each) for each in contours]

#왼쪽에 있는 경계 순서대로 정렬
tmp = [w*h for (x,y,w,h) in rects]
#print(tmp)
rects = [(x,y,w,h) for (x,y,w,h) in rects if ((w*h>600)and(w*h<9000))]
#print(rects)
img_result = []
img_for_class = img.copy()
margin_pixel = 60
for rect in rects:
    # [y:y+h, x:x+w]
    img_result.append(
        img_for_class[rect[1] - margin_pixel: rect[1] + rect[3] + margin_pixel,
        rect[0] - margin_pixel: rect[0] + rect[2] + margin_pixel])

    # Draw the rectangles
    cv2.rectangle(img, (rect[0], rect[1]),
                  (rect[0] + rect[2], rect[1] + rect[3]), (0, 255, 0), 5)


plt.figure(figsize=(15,12))
plt.imshow(img)
plt.figure(figsize=(4,4))

plt.imshow(cv2.resize(img_result[0], (28,28)))

--------------------------
#여기까지 성공

count = 0
nrows = 3
ncols = 3
plt.figure(figsize=(12,8))

for n in img_result:
    count += 1
    plt.subplot(nrows, ncols, count)
    plt.imshow(cv2.resize(n,(28,28)), cmap='Greys', interpolation='nearest')

plt.tight_layout()
plt.show()
